@use 'base';

// all heritance and able to use parent variable
.inverse {
  background-color: base.$primary-color;
  color:white;
}

// mixin is use whole site
@mixin transform($property) {
  -webkit-transform: $property;
  -ms-transform: $property;
  transform: $property;
}
.box { @include transform(rotate(30deg)); }

/* CSS
.box {
  -webkit-transform: rotate(30deg);
  -ms-transform: rotate(30deg);
  transform: rotate(30deg);
}
*/

// @extend lets you share a set of CSS properties from one selector to another.
%message-shared {
  border: 1px solid #ccc
  padding
}

/* This CSS will print because %message-shared is extended. */
%message-shared {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

// This CSS won't print because %equal-heights is never extended.
// CSS in %equal-heights isn't generated, because %equal-heights is never extended.
// is this Abstract Class
%equal-heights {
  display: flex;
  flex-wrap: wrap;
}

.message {
  @extend %message-shared;
}

.success { // override 
  @extend %message-shared;
  border-color: green;
}

.error {
  @extend %message-shared;
  border-color: red;
}

.warning {
  @extend %message-shared;
  border-color: yellow;
}

